SOLUTION 
You should first ask your interviewer if the string is an ASCII string or a Unicode string. 
Asking this question will show an eye for detail and a solid foundation in computer science. 
We'll assume for simplicity the character set is ASCII. 
If this assumption is not valid, we would need to increase the storage size. 
One solution is to create an array of boolean values, where the flag at index i indicates whether character 
i in the alphabet is contained in the string. 
The second time you see this character you can immediately return false. 
We can also immediately return false if the string length exceeds the number of unique characters in the alphabet.
After all, you can't form a string of 280 unique characters out of a 128-character alphabet. 
It's also okay to assume 256 characters. 
This would be the case in extended ASCII. You should 
clarify your assumptions with your interviewer.

The time complexity for this code is O(n), where n is the length of the string. 
The space complexity is O(l). 
(You could also argue the time complexity is 0(1), since the for loop will never iterate through more than 
128 characters.) 
If you didn't want to assume the character set is fixed, you could express the complexity as 
O(c) space and O(min(c, n)) or O(c) time, where c is the size of the character set. 
