Solution #1 O(n)

In order to remove duplicates from a linked list, we need to be able to track duplicates.
A simple hash table will work well here.
In the below solution, we simply iterate through the linked list, adding each element to a hash table. 
When we discover a duplicate element, we remove the element and continue iterating. 
We can do this all in one pass since we are using a linked list.
The above solution takes O(n) time, where N is the number of elements in the linked list.

Solution #2 O(n2)
Follow Up: No Buffer Allowed
If we don't have a buffer, we can iterate with two pointers: current which iterates through the linked list, 
and runner which checks all subsequent nodes for duplicates.

This code runs in O(1) space, but O(n2) time.
