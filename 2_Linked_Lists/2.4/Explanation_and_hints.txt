Solution #1
If this were an array, we would need to be careful about how we shifted elements. 
Array shifts are very expensive.

However, in a linked list, the situation is much easier. 
Rather than shifting and swapping elements, we can actually create two different linked lists: 
one for elements less than x, and one for elements greater than or equal to x.

We iterate through the linked list, inserting elements into our before list or our after list. 
Once we reach the end of the linked list and have completed this splitting, we merge the two lists.
This approach is mostly "stable" in that elements stay in their original order, other than the necessary movement around the partition. 
The code below implements this approach. 

If it bugs you to keep around four different variables for tracking two linked lists, you're not alone. We can
make this code a bit shorter.

Solution #2
If we don't care about making the elements of the list "stable" 
(which there's no obligation to, since the interviewer hasn't specified that), 
then we can instead rearrange the elements by growing the list at the head and tail. 

In this approach, we start a"new" list (using the existing nodes). 
Elements bigger than the pivot element are put at the tail and elements smaller are put at the head. 
Each time we insert an element, we update either the head or tail.
There are many equally optimal solutions to this problem. If you came up with a different one, that's okay!
