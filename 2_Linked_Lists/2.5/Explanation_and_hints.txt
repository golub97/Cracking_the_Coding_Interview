Problem 1 => reverse order

It's useful to remember in this problem how exactly addition works. 
Imagine the problem:
  6 1 7
+ 2 9 5
First, we add 7 and 5 to get 12.
The digit 2 becomes the last digit of the number, and 1 gets carried over to the next step. 
Second, we add 1, 1, and 9 to get 11. 
The 1 becomes the second digit, and the other 1 gets carried over the final step. 
Third and finally, we add 1, 6 and 2 to get 9. So, our value becomes 912.
We can mimic this process recursively by adding node by node, carrying over any "excess" data to the next node. 
Let's walk through this for the below linked list:
  7 -> 1 -> 6
+ 5 -> 9 -> 2
We do the following:
1. We add 7 and 5 first, getting a result of 12. 
2 becomes the first node in our linked list, and we "carry" the 1 to the next sum.
List: 2 -> ?
2. We then add 1 and 9, as well as the "carry" getting a result of 11. 
1 becomes the second element of our linked list, and we carry the 1 to the next sum.
List: 2 -> 1 -> ?
3. Finally, we add 6, 2 and our "carry" to get 9.
This becomes the final element of our linked list.
List: 2 -> 1 -> 9.
In implementing this code, we must be careful to handle the condition when one linked list is shorter than another. 
We don't want to get a null pointer exception. 

Problem 2 => forward order
Part B is conceptually the same (recurse, carry the excess), but has some additional complications when it comes to implementation:
1. One list may be shorter than the other, and we cannot handle this "on the fly".
For example, suppose we were adding (1 -> 2 -> 3-> 4) and (5-> 6-> 7).
We need to know that the 5 should be "matched" with the 2, not the 1. 
We can accomplish this by comparing the lengths of the lists in the beginning and padding the shorter list with zeros.

2. In the first part, successive results were added to the tail (i.e., passed forward). 
This meant that the recursive call would be passed the carry, and would return the result (which is then appended to the tail). 
In this case, however, results are added to the head (i.e., passed backward). 
The recursive call must return the result, as before, as well as the carry. 
This is not terribly challenging to implement, but it is more cumbersome. 
We can solve this issue by creating a wrapper class called Partial Sum.

Note how we have pulled insertBefore(), padlist(), and length() (not listed) into their own methods. 
This makes the code cleaner and easier to read-a wise thing to do in your interviews! 
