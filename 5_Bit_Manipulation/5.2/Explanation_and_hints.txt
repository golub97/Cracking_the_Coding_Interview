
NOTE: When otherwise ambiguous, we'll use the subscripts X2 and X10 to indicate whether xis in base 2 or
base 10.
First, let's start off by asking ourselves what a non-integer number in binary looks like. 
By analogy to a decimal number, the binary number (0.101)2 would look like:
(0.101)2 = (1 * 1/2) + (0 * 1/4) + (1 * 1/8)

Solution #1
To print the decimal part, we can multiply by 2 and check if 2n is greater than or equal to 1. 
This is essentially "shifting" the fractional sum. 
r = 2 * n
  = 2 * (0.101)2
  = (1 * 1/1) + (0 * 1/2) + (1 * 1/4)
  = (1.01)2 
If r >= 1, then we know that n had a 1 right after the decimal point. 
By doing this continuously, we can check every digit.

Solution #2
Alternatively, rather than multiplying the number by two and comparing it to 1,
we can compare the number to . 5, then . 25, and so on. 
The code below demonstrates this approach. 
Both approaches are equally good; 
choose the one you feel most comfortable with.
Either way, you should make sure to prepare thorough test cases for this problem-and to actually run through them in your interview. 
